filter(segment != 'Womens E-Mail') %>%
#介入をあらわすtreatment変数を追加
#mutateはその中に変数名とその定義を記入すると、%>%で渡された入力にその変数を追加した結果を出力してくれる関数
mutate(treatment = if_else(segment == "Mens E-Mail", 1, 0))
male_df
library("tidyverse")
#データの読み込み
email_data <- read_csv("http://www.minethatdata.com/Kevin_Hillstrom_MineThatData_E-MailAnalytics_DataMiningChallenge_2008.03.20.csv")
#dataframeではなさそう。色々含んでいる
email_data
male_df <- email_data %>%
#女性向けメールが配信されたデータを削除
filter(segment != 'Womens E-Mail') %>%
#介入をあらわすtreatment変数を追加
#mutateはその中に変数名とその定義を記入すると、%>%で渡された入力にその変数を追加した結果を出力してくれる関数
mutate(treatment = if_else(segment == "Mens E-Mail", 1, 0))
male_df
rct_reg <- lm(data = male_df, formula = spend ~ treatment + history)
#結果を見ると、メールを送信することで、売り上げが平均0.7ほど増えるという解釈が可能
summary(rct_reg)
library("broom")
rct_reg_coef <- tidy(rct_reg)
rct_reg_coef
#シードを固定
set.seed(1)
#条件に反応するサンプルの量を半分にする
obs_rate_c <- 0.5
obs_rate_t <- 0.5
# バイアスのあるデータを作成
biased_data <- male_df %>% mutate(
obs_rate_c= if_else(
(history > 300) | (recency < 6) | (channel == "Multichannel"), obs_rate_c, 1
),
obs_rate_t = if_else(
(history > 300) | (recency < 6) | (channel == "Multichannel"), 1, obs_rate_t
),
random_number = runif(n= NROW(male_df))
)%>%
filter(
(treatment == 0 & random_number < obs_rate_c) | (treatment == 1 & random_number < obs_rate_t)
)
# セレクションバイアスのあるデータで平均を比較
summary_by_segment_biased <- biased_data %>%
group_by(treatment) %>%
summarize(conversion_rate = mean(conversion),
spend_mean = mean(spend),
count = n())
summary_by_segment_biased
mens_mail_biased <- biased_data %>%
filter(treatment == 1) %>%
pull(spend)
mens_mail_biased
## (b)メールが配信されなかったグループの購買データをえる
no_mail_biased <- biased_data %>%
filter(treatment == 0) %>%
pull(spend)
no_mail_biased
cor_visit_treatment <- lm(
data=biased_data,
formula = treatment ~ visit + channel + recency + history
) %>% tidy()
cor_visit_treatment <- lm(
data=biased_data,
formula = treatment ~ visit + channel + recency + history
) %>% tidy()
cor_visit_treatment
bad_control_reg <- lm(
data = biased_data,
formula = spend ~ treatment + channel + recency + history + visit
) %>% tidy()
bad_control_reg
library("MatchIt")
install.packages("MatchIt")
library("MatchIt")
#データの読み込み
email_data <- read_csv("http://www.minethatdata.com/Kevin_Hillstrom_MineThatData_E-MailAnalytics_DataMiningChallenge_2008.03.20.csv")
#dataframeではなさそう。色々含んでいる
email_data
## 女性向けメールが配信されたデータを削除したデータを作成
male_df <- email_data %>%
#女性向けメールが配信されたデータを削除
filter(segment != 'Womens E-Mail') %>%
#介入をあらわすtreatment変数を追加
#mutateはその中に変数名とその定義を記入すると、%>%で渡された入力にその変数を追加した結果を出力してくれる関数
mutate(treatment = if_else(segment == "Mens E-Mail", 1, 0))
#データの読み込み
email_data <- read_csv("http://www.minethatdata.com/Kevin_Hillstrom_MineThatData_E-MailAnalytics_DataMiningChallenge_2008.03.20.csv")
library("tidyverse")
#データの読み込み
email_data <- read_csv("http://www.minethatdata.com/Kevin_Hillstrom_MineThatData_E-MailAnalytics_DataMiningChallenge_2008.03.20.csv")
#dataframeではなさそう。色々含んでいる
email_data
male_df <- email_data %>%
#女性向けメールが配信されたデータを削除
filter(segment != 'Womens E-Mail') %>%
#介入をあらわすtreatment変数を追加
#mutateはその中に変数名とその定義を記入すると、%>%で渡された入力にその変数を追加した結果を出力してくれる関数
mutate(treatment = if_else(segment == "Mens E-Mail", 1, 0))
#シードを固定
set.seed(1)
obs_rate_c <- 0.5
obs_rate_t <- 0.5
biased_data <- male_df %>% mutate(
obs_rate_c= if_else(
(history > 300) | (recency < 6) | (channel == "Multichannel"), obs_rate_c, 1
),
obs_rate_t = if_else(
(history > 300) | (recency < 6) | (channel == "Multichannel"), 1, obs_rate_t
),
random_number = runif(n= NROW(male_df))
)%>%
filter(
(treatment == 0 & random_number < obs_rate_c) | (treatment == 1 & random_number < obs_rate_t)
)
install.packages("MatchIt")
library("MatchIt")
m_near <- matchit(formula = treatment ~ recency + history + channel, data=biased_data, )
#傾向スコアを利用したマッチング
m_near <- matchit(formula = treatment ~ recency + history + channel, data=biased_data, method = "nearest", replace=TRUE)
library("MatchIt")
#傾向スコアを利用したマッチング
m_near <- matchit(formula = treatment ~ recency + history + channel, data=biased_data, method = "nearest", replace=TRUE)
head(biased_data)
head(matched_data)
#マッチング後のデータを作成
matched_data <- match.data(m_near)
head(matched_data)
# biased_data <- male_df %>% mutate(
#   obs_rate_c= if_else(
#     (history > 300) | (recency < 6) | (channel == "Multichannel"), obs_rate_c, 1
#   ),
#
#   obs_rate_t = if_else(
#     (history > 300) | (recency < 6) | (channel == "Multichannel"), 1, obs_rate_t
#   ),
#   random_number = runif(n= NROW(male_df))
# )%>%
#   filter(
#     (treatment == 0 & random_number < obs_rate_c) | (treatment == 1 & random_number < obs_rate_t)
#   )
head(biased_data)
#傾向スコアを利用したマッチング
m_near <- matchit(formula = treatment ~ recency + history + channel, data=biased_data, method = "nearest", replace=TRUE)
#マッチング後のデータを作成
matched_data <- match.data(m_near)
m_near
#マッチング後のデータを作成
matched_data <- match.data(m_near)
nrow(matched_data)
PSM_result
## マッチング後のデータで効果の推定
PSM_result <- matched_data %>% lm(spend ~ treatment, data = .) %>% tidy()
library("tidyverse")
## マッチング後のデータで効果の推定
PSM_result <- matched_data %>% lm(spend ~ treatment, data = .) %>% tidy()
# tidy関数を利用することで、各パラメータについて、
# 変数名、推定値、標準誤差、t値、p値といった値が入ったデータフレームを出力してくれる
library("broom")
# tidy関数を利用することで、各パラメータについて、
# 変数名、推定値、標準誤差、t値、p値といった値が入ったデータフレームを出力してくれる
library("broom")
## マッチング後のデータで効果の推定
PSM_result <- matched_data %>% lm(spend ~ treatment, data = .) %>% tidy()
PSM_result
summary(m_near)
#分析するデータのあるパッケージをインストール(初回)
install.packages("Ecdat")
#ライブラリの読み込み
library("Ecdat")
#%>%を使うためのライブラリ
library("dplyr")
library("tidyverse")
#Proposition99の分析：集計による分析
##データ準備
### Common Trend Assumptionのために分析から特定の州を外す
### タバコの税金が1988年以降50せんと以上上がった州のリスト
### Alaska, Hawaii, Maryland, Michigan, New Jersey, NewYork, Washington
skip_state <- c(3,9,10,22,21,23,31,33,48)
### Cigarデータセットの読み込み
### skip_stateに含まれる州のデータを削除
head(Cigar)
Cigar <- Cigar %>%
filter(!state %in% skip_state, year >= 70) %>% mutate(area = if_else(state == 5, "CA", "Rest of US"))
library(ggplot2)
Cigar_for_plot <- Cigar %>% mutate(year_segment = if_else(year < 88, 'before', 'after'))
Cigar_for_plot2 <- Cigar_for_plot %>%
group_by(area, year_segment) %>%
summarize(sales = sum(sales*pop16)/sum(pop16))
Cigar_for_plot2$year_segment <- factor(Cigar_for_plot2$year_segment, levels = c("before", "after"))
Colours2=c("white","gray80","black")
ggplot(Cigar_for_plot2, aes(x = year_segment, y = sales, group = area)) +
geom_line(aes(linetype = area)) +
geom_point(aes(shape = c(16,17)))
ylim(c(0,NA)) +
theme_bw() +
scale_fill_manual(values = Colours2)
Colours2=c("white","gray80","black")
ggplot(Cigar_for_plot2, aes(x = year_segment, y = sales, group = area)) +
geom_line(aes(linetype = area)) +
geom_point(aes(shape = c(16,17))) +
ylim(c(0,NA)) +
theme_bw() +
scale_fill_manual(values = Colours2)
ggplot(Cigar_for_plot2, aes(x = year_segment, y = sales, group = area)) +
geom_line(aes(linetype = area)) +
geom_point(aes(shape = c("A","B"))) +
ylim(c(0,NA)) +
theme_bw() +
scale_fill_manual(values = Colours2)
ggplot(Cigar_for_plot2, aes(x = year_segment, y = sales, group = area)) +
geom_line(aes(linetype = area)) +
geom_point(aes(shape = area)) +
ylim(c(0,NA)) +
theme_bw() +
scale_fill_manual(values = Colours2)
Cigar_did_sum <- Cigar %>%
mutate(post = if_else(year > 87, 1, 0),
ca = if_else(state == 5, 1, 0),
state = factor(state),
year_dummy = paste("D", year, sep = "_")) %>%
group_by(post, year, year_dummy, ca) %>%
summarize(sales = sum(sales*pop16)/sum(pop16))
Cigar_did_sum
Cigar_did_sum_seg <- Cigar_did_syn %>%
lm(data = ., sales ~ ca + post + ca:post + year_dummy) %>%
tidy() %>%
filter(!str_detect(term, "state"),
!str_detect(term, "year"))
Cigar_did_sum_seg <- Cigar_did_sum %>%
lm(data = ., sales ~ ca + post + ca:post + year_dummy) %>%
tidy() %>%
filter(!str_detect(term, "state"),
!str_detect(term, "year"))
library("Ecdat")
library("bloom")
install.packages("bloom")
library("bloom")
install.packages("broom")
install.packages("broom")
library("broom")
library("tidyverse")
library("broom")
Cigar_did_sum_seg <- Cigar_did_sum %>%
lm(data = ., sales ~ ca + post + ca:post + year_dummy) %>%
tidy() %>%
filter(!str_detect(term, "state"),
!str_detect(term, "year"))
Cigar_did_sum_seg <- Cigar_did_sum %>%
lm(data = ., sales ~ ca + post + ca:post + year_dummy) %>% tidy() %>%
filter(!str_detect(term, "state"),
!str_detect(term, "year"))
library("broom")
library("tidyverse")
Cigar_did_sum_seg <- Cigar_did_sum %>%
lm(data = ., sales ~ ca + post + ca:post + year_dummy) %>% tidy() %>%
filter(!str_detect(term, "state"),
!str_detect(term, "year"))
library("broom")
remove.packages("broom")
library("broom")
#分析するデータのあるパッケージをインストール(初回)
#install.packages("Ecdat")
install.packages("broom")
install.packages("broom")
library("broom")
Cigar_did_sum_seg <- Cigar_did_sum %>%
lm(data = ., sales ~ ca + post + ca:post + year_dummy) %>% tidy() %>%
filter(!str_detect(term, "state"),
!str_detect(term, "year"))
library("tidyverse")
Cigar_did_sum_seg <- Cigar_did_sum %>%
lm(data = ., sales ~ ca + post + ca:post + year_dummy) %>% tidy() %>%
filter(!str_detect(term, "state"),
!str_detect(term, "year"))
Cigar_did_sum_seg
Cigar_did_sum_seg
Cigar_did_sum_reg <- Cigar_did_sum %>%
lm(data = ., sales ~ ca + post + ca:post + year_dummy) %>% tidy() %>%
filter(!str_detect(term, "state"),
!str_detect(term, "year"))
Cigar_did_sum_reg
Cigar_did_sum_logreg <- Cigar_did_sum %>%
lm(data = ., log(sales) ~ ca + post + ca:post + year_dummy) %>% tidy() %>%
filter(!str_detect(term, "state"),
!str_detect(term, "year"))
Cigar_did_sum_logreg
Cigar_for_plot <- Cigar %>%
mutate(year_segment = if_else(year < 88, 'before', 'after')) %>%
group_by(area, year_segment) %>%
summarize(sales = sum(sales*pop16)/sum(pop16))
Cigar_for_plot2$year_segment <- factor(Cigar_for_plot2$year_segment, levels = c("before", "after"))
Colours2=c("white","gray80","black")
ggplot(Cigar_for_plot2, aes(x = year_segment, y = sales, group = area)) +
geom_line(aes(linetype = area)) +
geom_point(aes(shape = area)) +
ylim(c(0,NA)) +
theme_bw() +
scale_fill_manual(values = Colours2)
Cigar_for_plot2 %>%
group_by(area, year) %>%
summarize(sales = sum(sales*pop16)/sum(pop16)) %>%
ggplot(Cigar_for_plot2, aes(x = year, y = sales, group = area)) +
geom_line(aes(linetype = area)) +
geom_point(aes(shape = area)) +
ylim(c(0,NA)) +
theme_bw() +
scale_fill_manual(values = Colours2)
Cigar_for_plot2 %>%
group_by(area, year) %>%
summarize(sales = sum(sales*pop16)/sum(pop16)) %>%
ggplot(aes(x = year, y = sales, group = area)) +
geom_line(aes(linetype = area)) +
geom_point(aes(shape = area)) +
ylim(c(0,NA)) +
theme_bw() +
scale_fill_manual(values = Colours2)
Cigar %>%
group_by(area, year) %>%
summarize(sales = sum(sales*pop16)/sum(pop16)) %>%
ggplot(aes(x = year, y = sales, group = area)) +
geom_line(aes(linetype = area)) +
geom_point(aes(shape = area)) +
ylim(c(0,NA)) +
theme_bw() +
scale_fill_manual(values = Colours2)
Cigar %>%
group_by(area, year) %>%
summarize(sales = sum(sales*pop16)/sum(pop16)) %>%
ggplot(aes(x = year, y = sales, group = area)) +
geom_line(aes(linetype = area)) +
geom_point(aes(shape = area)) +
ylim(c(65,NA)) +
theme_bw() +
scale_fill_manual(values = Colours2)
Cigar %>%
group_by(area, year) %>%
summarize(sales = sum(sales*pop16)/sum(pop16)) %>%
ggplot(aes(x = year, y = sales, group = area)) +
geom_line(aes(linetype = area)) +
geom_point(aes(shape = area)) +
geom_vline(aes(xintercept=88), color="black", linetype="dashed")
ylim(c(65,NA)) +
theme_bw() +
scale_fill_manual(values = Colours2)
Cigar %>%
group_by(area, year) %>%
summarize(sales = sum(sales*pop16)/sum(pop16)) %>%
ggplot(aes(x = year, y = sales, group = area)) +
geom_line(aes(linetype = area)) +
geom_point(aes(shape = area)) +
geom_vline(aes(xintercept=88), linetype="dashed")
ylim(c(65,NA)) +
theme_bw() +
scale_fill_manual(values = Colours2)
Cigar %>%
group_by(area, year) %>%
summarize(sales = sum(sales*pop16)/sum(pop16)) %>%
ggplot(aes(x = year, y = sales, group = area)) +
geom_line(aes(linetype = area)) +
geom_point(aes(shape = area)) +
geom_vline(aes(xintercept=88), linetype="dashed")
ylim(c(65,NA)) +
theme_bw() +
scale_fill_manual(values = Colours2)
Cigar %>%
group_by(area, year) %>%
summarize(sales = sum(sales*pop16)/sum(pop16)) %>%
ggplot(aes(x = year, y = sales, group = area)) +
geom_line(aes(linetype = area)) +
geom_point(aes(shape = area)) +
geom_vline(aes(xintercept=88), colour="black", linetype="dashed")
ylim(c(65,NA)) +
theme_bw() +
scale_fill_manual(values = Colours2)
Cigar %>%
group_by(area, year) %>%
summarize(sales = sum(sales*pop16)/sum(pop16)) %>%
ggplot(aes(x = year, y = sales, group = area)) +
geom_line(aes(linetype = area)) +
geom_point(aes(shape = area)) +
geom_vline(aes(xintercept=88), colour="black", linetype="dashed") +
ylim(c(65,NA)) +
theme_bw() +
scale_fill_manual(values = Colours2)
install.packages("CausalImpact")
# CigarデータをCausal Impact用に整形
### 目的変数としてカリフォルニア州の売上だけ抜き出す
Y <- Cigar %>% filter(state == 5) %>% pull(sales)
X_sales <- Cigar %>%
filter(state != 5) %>%
select(state, sales, year) %>%
spread(state, sales)
X_sales <- Cigar %>%
filter(state != 5)
X_sales <- Cigar %>%
filter(state != 5) %>%
select(state, sales, year)
head(X_sales)
X_sales <- Cigar %>%
filter(state != 5) %>%
select(state, sales, year) %>%
spread(state, sales)
head(X_sales)
### 介入が行われるデータを示す
pre_period <- c(1:nrow(S_sales))[X_sales$year < 88]
post_period <- c(1:nrow(X_sales))X_sales$year >= 88]
### 介入が行われるデータを示す
pre_period <- c(1:nrow(X_sales))[X_sales$year < 88]
post_period <- c(1:nrow(X_sales))[X_sales$year >= 88]
### 目的変数と共変量をバインド
CI_date <- cbind(Y, X_sales) %>% select(-year)
impact <- CausalImpact::CausalImpact(
CI_data,
pre.period = c(min(pre_period), max(pre_period)),
post.period = c(min(post_period), max(post_period))
)
### 目的変数と共変量をバインド
CI_date <- cbind(Y, X_sales) %>% select(-year)
### 目的変数と共変量をバインド
CI_data <- cbind(Y, X_sales) %>% select(-year)
impact <- CausalImpact::CausalImpact(
CI_data,
pre.period = c(min(pre_period), max(pre_period)),
post.period = c(min(post_period), max(post_period))
)
## 結果のplot
plot(impact)
impact
impact
impact
impact
impact
impact
impact
ls
getwd()
setwd("/Users/naho/git/R/Rmarkdown")
knitr::opts_chunk$set(echo = TRUE)
gp <- ggplot(iris, aes(x = Sepal.Length,alpha=0.8)) +
geom_histogram(bins = 30, color='black') +
ggtitle("Sepal.Length") +
theme(legend.position = 'none')
library(ggplot)
install.packages("ggplot")
# install.packages("ggplot")
library(ggplot)
install.packages("tidyverse")
library(tidyverse)
gp <- ggplot(iris, aes(x = Sepal.Length,alpha=0.8)) +
geom_histogram(bins = 30, color='black') +
ggtitle("Sepal.Length") +
theme(legend.position = 'none')
gp
set.seed(42)
# 2000回のブートストラップ平均の生成
N = 2000
mean_boot <- numeric(N)
for (k in 1:N){
strap_ind <- sample(1:150, replace = TRUE)
strap_dat <- iris$Sepal.Length[strap_ind]
mean_boot[k] <- mean(strap_dat)
}
numeric(N)
numeric(1)
mean_boot <- numeric(N)
for (k in 1:N){
strap_ind <- sample(1:150, replace = TRUE)
strap_dat <- iris$Sepal.Length[strap_ind]
mean_boot[k] <- mean(strap_dat)
}
strap_ind
strap_dat
var(mean_boot)
# [1] 0.004483655
plot_bootstrap_hist <- function(bootstrap_sample, title = "bootstrap mean"){
gp <- bootstrap_sample %>%
as.data.frame %>%
ggplot(aes(x = .,alpha=0.8)) +
geom_histogram(bins = 50, color='black') +
theme(legend.position = 'none')+
ggtitle(title) +
xlab("bootstrap sample")
gp
}
plot_bootstrap_hist(mean_boot)
var(mean_boot)
# [1] 0.004483655
plot_bootstrap_hist <- function(bootstrap_sample, title = "bootstrap mean"){
gp <- bootstrap_sample %>%
as.data.frame %>%
ggplot(aes(x = .,alpha=0.8)) +
geom_histogram(bins = 50, color='black') +
theme(legend.position = 'none')+
ggtitle(title) +
xlab("bootstrap sample")
gp
}
plot_bootstrap_hist(mean_boot)
# 両側95%信頼区間の算出
sort(mean_boot)[c(0.025*N, 0.975*N)]
library(tidyverse)
library(boot)
my_mean <- function(d, i){
b <- d[i,]
mean(b$Sepal.Length)
}
ratio.boot <- boot(iris, statistic = my_mean, R=2000, stype = "i")
ratio.boot
ratio.boot %>% plot
# 両側95%信頼区間の算出
# 正規分布になっているから出せる
sort(mean_boot)[c(0.025*N, 0.975*N)]
